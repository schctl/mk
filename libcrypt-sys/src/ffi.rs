/* automatically generated by rust-bindgen 0.59.1 */

pub const _CRYPT_H: u32 = 1;
pub const _SYS_CDEFS_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const CRYPT_OUTPUT_SIZE: u32 = 384;
pub const CRYPT_MAX_PASSPHRASE_SIZE: u32 = 512;
pub const CRYPT_GENSALT_OUTPUT_SIZE: u32 = 192;
pub const CRYPT_DATA_RESERVED_SIZE: u32 = 767;
pub const CRYPT_DATA_INTERNAL_SIZE: u32 = 30720;
pub const CRYPT_SALT_OK: u32 = 0;
pub const CRYPT_SALT_INVALID: u32 = 1;
pub const CRYPT_SALT_METHOD_DISABLED: u32 = 2;
pub const CRYPT_SALT_METHOD_LEGACY: u32 = 3;
pub const CRYPT_SALT_TOO_CHEAP: u32 = 4;
pub const CRYPT_GENSALT_IMPLEMENTS_DEFAULT_PREFIX: u32 = 1;
pub const CRYPT_GENSALT_IMPLEMENTS_AUTO_ENTROPY: u32 = 1;
pub const CRYPT_CHECKSALT_AVAILABLE: u32 = 1;
pub const CRYPT_PREFERRED_METHOD_AVAILABLE: u32 = 1;
pub const XCRYPT_VERSION_MAJOR: u32 = 4;
pub const XCRYPT_VERSION_MINOR: u32 = 4;
pub const XCRYPT_VERSION_NUM: u32 = 262148;
pub const XCRYPT_VERSION_STR: &'static [u8; 7usize] = b"4.4.25\0";
extern "C" {
    pub fn crypt(
        __phrase: *const ::std::os::raw::c_char,
        __setting: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypt_data {
    pub output: [::std::os::raw::c_char; 384usize],
    pub setting: [::std::os::raw::c_char; 384usize],
    pub input: [::std::os::raw::c_char; 512usize],
    pub reserved: [::std::os::raw::c_char; 767usize],
    pub initialized: ::std::os::raw::c_char,
    pub internal: [::std::os::raw::c_char; 30720usize],
}
#[test]
fn bindgen_test_layout_crypt_data() {
    assert_eq!(
        ::std::mem::size_of::<crypt_data>(),
        32768usize,
        concat!("Size of: ", stringify!(crypt_data))
    );
    assert_eq!(
        ::std::mem::align_of::<crypt_data>(),
        1usize,
        concat!("Alignment of ", stringify!(crypt_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).output as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).setting as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).input as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).reserved as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).initialized as *const _ as usize },
        2047usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_data>())).internal as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(internal)
        )
    );
}
extern "C" {
    pub fn crypt_r(
        __phrase: *const ::std::os::raw::c_char,
        __setting: *const ::std::os::raw::c_char,
        __data: *mut crypt_data,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_rn(
        __phrase: *const ::std::os::raw::c_char,
        __setting: *const ::std::os::raw::c_char,
        __data: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_ra(
        __phrase: *const ::std::os::raw::c_char,
        __setting: *const ::std::os::raw::c_char,
        __data: *mut *mut ::std::os::raw::c_void,
        __size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_gensalt(
        __prefix: *const ::std::os::raw::c_char,
        __count: ::std::os::raw::c_ulong,
        __rbytes: *const ::std::os::raw::c_char,
        __nrbytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_gensalt_rn(
        __prefix: *const ::std::os::raw::c_char,
        __count: ::std::os::raw::c_ulong,
        __rbytes: *const ::std::os::raw::c_char,
        __nrbytes: ::std::os::raw::c_int,
        __output: *mut ::std::os::raw::c_char,
        __output_size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_gensalt_ra(
        __prefix: *const ::std::os::raw::c_char,
        __count: ::std::os::raw::c_ulong,
        __rbytes: *const ::std::os::raw::c_char,
        __nrbytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_checksalt(__setting: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_preferred_method() -> *const ::std::os::raw::c_char;
}
